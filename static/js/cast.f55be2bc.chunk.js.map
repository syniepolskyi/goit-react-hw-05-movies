{"version":3,"file":"static/js/cast.f55be2bc.chunk.js","mappings":"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","sources":["components/Error/Error.js","services/apiService.js","services/status.js","webpack://goit-react-hw-05-movies-2022/./src/views/Cast/Cast.module.css?f355","views/Cast/Cast.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport errorImage from '../../img/no_results_found.png';\nimport './Error.css';\n\nexport default function ErrorComponent({ message }) {\n  return (\n    <div role=\"alert\" className=\"wrapper\">\n      <img src={errorImage} width=\"400\" alt=\"no results found\" />\n      <p text={message} className=\"text\">\n        {message}\n      </p>\n    </div>\n  );\n}\n\nErrorComponent.propTypes = {\n  textError: PropTypes.string.isRequired,\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '92ffb34e08e714eb390805a25b0a06d3';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nasync function getPopularMovies(page) {\n  try {\n    const config = {\n      url: `trending/movie/day`,\n      params: {\n        page,\n      },\n    };\n    const { data } = await axios(config, page);\n    return data;\n  } catch (error) {\n    console.log('error', { error });\n    return null;\n  }\n}\n\nasync function getMoviesByKeyWord(query, page) {\n  try {\n    const config = {\n      url: `search/movie`,\n      params: {\n        query,\n        page,\n      },\n    };\n    const { data } = await axios(config, query, page);\n    return data;\n  } catch (error) {\n    console.log('error', { error });\n    return null;\n  }\n}\n\nasync function getMovieById(id) {\n  try {\n    const config = {\n      url: `movie/${id}`,\n    };\n    const { data } = await axios(config, id);\n    return data;\n  } catch (error) {\n    console.log('error', { error });\n    return null;\n  }\n}\n\nasync function getCastInfo(id) {\n  try {\n    const config = {\n      url: `movie/${id}/credits`,\n    };\n    const { data } = await axios(config, id);\n    return data.cast;\n  } catch (error) {\n    console.log('error', { error });\n    return null;\n  }\n}\n\nasync function getMovieReview(id) {\n  try {\n    const config = {\n      url: `movie/${id}/reviews`,\n    };\n    const { data } = await axios(config, id);\n    return data.results;\n  } catch (error) {\n    console.log('error', { error });\n    return null;\n  }\n}\n\nconst apiService = {\n  getPopularMovies,\n  getMoviesByKeyWord,\n  getMovieById,\n  getCastInfo,\n  getMovieReview,\n};\n\nexport default apiService;\n","const Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nexport default Status;\n","// extracted by mini-css-extract-plugin\nexport default {\"cast\":\"Cast_cast__4bEWn\",\"castItem\":\"Cast_castItem__Jdv3A\",\"castImg\":\"Cast_castImg__YPphm\",\"name\":\"Cast_name__1PqOC\",\"character\":\"Cast_character__8TC1h\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport apiService from '../../services/apiService';\nimport Status from '../../services/status';\nimport LoaderComponent from '../../components/Loader';\nimport ErrorComponent from '../../components/Error';\nimport noPhoto from '../../img/no_image.jpg';\nimport styles from './Cast.module.css';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n\n  useEffect(() => {\n    apiService\n      .getCastInfo(movieId)\n      .then(cast => {\n        if (cast.length === 0) {\n          setStatus(Status.IDLE);\n          return;\n        }\n        setActors(cast);\n        setStatus(Status.RESOLVED);\n      })\n\n      .catch(error => {\n        console.log(error);\n        setError(error);\n        setStatus(Status.REJECTED);\n      });\n  }, [movieId, error]);\n\n  return (\n    <>\n      {status === Status.PENDING && <LoaderComponent />}\n\n      {status === Status.REJECTED && <ErrorComponent />}\n\n      {status === Status.RESOLVED && (\n        <ul className={styles.cast}>\n          {actors.map(actor => (\n            <li key={actor.id} className={styles.castItem}>\n              <img\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n                    : noPhoto\n                }\n                alt={actor.original_name}\n                className={styles.castImg}\n              />\n              <h4 className={styles.name}>{actor.original_name}</h4>\n              <p className={styles.character}>{actor.character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {status === Status.IDLE && (\n        <p>\n          <i> We don't have any cast for this movie.</i>\n        </p>\n      )}\n    </>\n  );\n}\n"],"names":["ErrorComponent","message","role","className","src","errorImage","width","alt","text","page","config","url","params","axios","data","console","log","error","query","id","cast","results","api_key","language","apiService","getPopularMovies","getMoviesByKeyWord","getMovieById","getCastInfo","getMovieReview","IDLE","PENDING","RESOLVED","REJECTED","Cast","movieId","useParams","useState","actors","setActors","setError","Status","status","setStatus","useEffect","then","length","catch","Loader","Error","styles","map","actor","profile_path","noPhoto","original_name","character"],"sourceRoot":""}